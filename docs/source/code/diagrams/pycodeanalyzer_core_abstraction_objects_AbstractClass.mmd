classDiagram
class AbstractClass {
<<Class>>
+ str namespace
+ str type
+ List&lt;Tuple&lt;str,str,str&gt;&gt; members
+ List&lt;Tuple&lt;str,str,List&lt;Tuple&lt;str,str&gt;&gt;,str&gt;&gt; methodes
+ List&lt;Tuple&lt;str,str,str&gt;&gt; parents
+ List~str~ linkedGenericTypes
+ List~AbstractClassClassifier~ classifiers
+Constructor(str name, str namespace, str origin) None
+addGenericType(str genType) None
+addMember(str type, str name, str visibility) None
+hasMember(str name) bool
+addMethod(str returnType, str name, List&lt;Tuple&lt;str,str&gt;&gt; parameters, str visibility) None
+addParent(str completetype, str name, str visibility) None
+addClassifier(AbstractClassClassifier classifier) None
+getMainClassifier() str
+getLinkedTypes() List~str~
-isPotentialClassName(str type) bool
-getDependanceFromType(str type) List~str~
-splitTypes(Any decl) List~str~
+getFullName() str
-cleanLanguageArtifacts(str type) str
-removeNonObjectTypes(List~str~ typeList) List~str~
+isParent(AbstractClass klass) bool
+print() None
}
class AbstractObject {
<<Class>>
+ str name
+ str type
+ str origin
+ List~str~ usingNS
+ AbstractObjectLanguage objectLanguage
+ List~str~ linkedGenericTypes
+Constructor(str name, str origin) None
+addUsingNamespace(str namespace) None
}
link AbstractObject "class££pycodeanalyzer::core::abstraction::objects::AbstractObject"
class AbstractClassClassifier {
<<Enum>>
+ NoClassifier
+ External
+ Generic
+ Message
+ Data
}
link AbstractClassClassifier "enum££pycodeanalyzer::core::abstraction::objects::AbstractClassClassifier"
AbstractClass --|> AbstractObject
AbstractClass ..> AbstractClassClassifier
