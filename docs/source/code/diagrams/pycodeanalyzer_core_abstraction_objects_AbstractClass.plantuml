@startuml
class AbstractClass <<Class>>
{
+ str namespace
+ str type
+ List<Tuple<str,str,str>> members
+ List<Tuple<str,str,List<Tuple<str,str>>,str>> methodes
+ List<Tuple<str,str,str>> parents
+ List<str> linkedGenericTypes
+ List<AbstractClassClassifier> classifiers
+None Constructor(str name, str namespace, str origin)
+None addGenericType(str genType)
+None addMember(str type, str name, str visibility)
+bool hasMember(str name)
+None addMethod(str returnType, str name, List<Tuple<str,str>> parameters, str visibility)
+None addParent(str completetype, str name, str visibility)
+None addClassifier(AbstractClassClassifier classifier)
+str getMainClassifier()
+List<str> getLinkedTypes()
-bool isPotentialClassName(str type)
-List<str> getDependanceFromType(str type)
-List<str> splitTypes(Any decl)
+str getFullName()
-str cleanLanguageArtifacts(str type)
-List<str> removeNonObjectTypes(List<str> typeList)
+bool isParent(AbstractClass klass)
+None print()
}
class AbstractObject <<Class>>
{
+ str name
+ str type
+ str origin
+ List<str> usingNS
+ AbstractObjectLanguage objectLanguage
+ List<str> linkedGenericTypes
+None Constructor(str name, str origin)
+None addUsingNamespace(str namespace)
}
enum AbstractClassClassifier <<Enum>>
{
NoClassifier
External
Generic
Message
Data
}
AbstractClass --|> AbstractObject
AbstractClass ..|> AbstractClassClassifier
@enduml
