classDiagram
class IdentityAnalyser {
<<Class>>
+ Dict&lt;str,List&lt;Any&gt;&gt; mapping
+ str commonFilePath
+Constructor() None
+analyze(List~AbstractObject~ objects) None
+getClasses() List~AbstractClass~
+getEnums() List~AbstractEnum~
+getFunctions() List~AbstractFunction~
+getClasseTree() Dict~str,Any~
+getEnumTree() Dict~str,Any~
+getFunctionTree() Dict~str,Any~
+getFiles() List~str~
+getFileTree() Dict~str,Any~
+getClass(str classNamespacePath) AbstractClass
+getEnum(str enumNamespacePath) AbstractEnum
+getFunction(str funcFullDef) AbstractFunction
+getObjectInFile(str file) Dict&lt;str,List&lt;str&gt;&gt;
}
class AbstractObject {
<<Class>>
+ str name
+ str type
+ str origin
+ AbstractObjectLanguage language
+ List~str~ usingNS
+Constructor(str name, str origin) None
+addUsingNamespace(str namespace) None
}
link AbstractObject "class££pycodeanalyzer::core::abstraction::objects::AbstractObject"
class AbstractClass {
<<Class>>
+ str namespace
+ str type
+ List&lt;Tuple&lt;str,str,str&gt;&gt; members
+ List&lt;Tuple&lt;str,str,List&lt;Tuple&lt;str,str&gt;&gt;,str&gt;&gt; methodes
+ List&lt;Tuple&lt;str,str,str&gt;&gt; parents
+Constructor(str name, str namespace, str origin) None
+addMember(str type, str name, str visibility) None
+hasMember(str name) bool
+addMethod(str returnType, str name, List&lt;Tuple&lt;str,str&gt;&gt; parameters, str visibility) None
+addParent(str completetype, str name, str visibility) None
+getLinkedTypes() List~str~
-isPotentialClassName(str type) bool
-getDependanceFromType(str type) List~str~
-splitTypes(Any decl) List~str~
+getFullName() str
-cleanLanguageArtifacts(str type) str
-removeNonObjectTypes(List~str~ typeList) List~str~
+isParent(AbstractClass klass) bool
+print() None
}
link AbstractClass "class££pycodeanalyzer::core::abstraction::objects::AbstractClass"
class AbstractEnum {
<<Class>>
+ str namespace
+ str type
+ List~str~ values
+Constructor(str name, str namespace, str origin, List~str~ values) Any
+getFullName() str
+print() None
}
link AbstractEnum "class££pycodeanalyzer::core::abstraction::objects::AbstractEnum"
class AbstractFunction {
<<Class>>
+ str namespace
+ str type
+ str returnType
+ List&lt;Tuple&lt;str,str&gt;&gt; parameters
+ str doxygen
+Constructor(str name, str origin, str returnType, List&lt;Tuple&lt;str,str&gt;&gt; parameters, str namespace, str doxygen) None
+print() None
+getFullDef() str
}
link AbstractFunction "class££pycodeanalyzer::core::abstraction::objects::AbstractFunction"
IdentityAnalyser ..> AbstractObject
IdentityAnalyser ..> AbstractClass
IdentityAnalyser ..> AbstractEnum
IdentityAnalyser ..> AbstractFunction
