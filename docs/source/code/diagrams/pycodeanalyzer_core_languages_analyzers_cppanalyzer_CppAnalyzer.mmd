classDiagram
class CppAnalyzer {
<<Class>>
+ List~str~ objectPaths
+ Encoding encoding
+ List~str~ forceIgnoredSymbols
+ Configuration configuration
+ bool configured
+ List~str~ defines
+Constructor(Configuration config) None
+analyze(str rootDir, str path) List~AbstractObject~
+handleClass(str path, Any klass, List~AbstractObject~ abstractObjects) None
+addMethods(AbstractClass abstraction, Any klass, str visibility) None
+addMembers(AbstractClass abstraction, Any klass, str visibility) None
+addParents(AbstractClass abstraction, Any klass) None
+handleEnum(str path, Any enum, List~AbstractObject~ abstractObjects) None
+handleFunction(str path, Any function, List~AbstractObject~ abstractObjects) None
+clearNamespace(str namespace) str
+extractUnexpectedFromParseError(CppHeaderParser::CppParseError err) str
+defineConfig() None
+handleConfigation() None
}
class Analyzer {
<<Class>>
+ Any logger
+Constructor(str name) None
+analyze(str rootDir, str path) List~AbstractObject~
}
link Analyzer "class££pycodeanalyzer::core::languages::analyzer::Analyzer"
class Configuration {
<<Class>>
+ Any logger
+ Any config
+ Dict&lt;str,List&lt;Tuple&lt;str,str&gt;&gt;&gt; definition
+Constructor() None
+load(str path) bool
+defineConfig(str section, str name, str comment) None
+get(str section, str name) str
+getInt(str section, str name) int
+getFloat(str section, str name) float
+getBool(str section, str name) bool
+getList(str section, str name) List~Any~
+generateTemplate(str path) None
}
link Configuration "class££pycodeanalyzer::core::configuration::configuration::Configuration"
class AbstractObject {
<<Class>>
+ str name
+ str type
+ str origin
+ AbstractObjectLanguage language
+ List~str~ usingNS
+ List~str~ linkedGenericTypes
+Constructor(str name, str origin) None
+addUsingNamespace(str namespace) None
}
link AbstractObject "class££pycodeanalyzer::core::abstraction::objects::AbstractObject"
class AbstractClass {
<<Class>>
+ str namespace
+ str type
+ List&lt;Tuple&lt;str,str,str&gt;&gt; members
+ List&lt;Tuple&lt;str,str,List&lt;Tuple&lt;str,str&gt;&gt;,str&gt;&gt; methodes
+ List&lt;Tuple&lt;str,str,str&gt;&gt; parents
+ List~str~ linkedGenericTypes
+Constructor(str name, str namespace, str origin) None
+addGenericType(str genType) None
+addMember(str type, str name, str visibility) None
+hasMember(str name) bool
+addMethod(str returnType, str name, List&lt;Tuple&lt;str,str&gt;&gt; parameters, str visibility) None
+addParent(str completetype, str name, str visibility) None
+getLinkedTypes() List~str~
-isPotentialClassName(str type) bool
-getDependanceFromType(str type) List~str~
-splitTypes(Any decl) List~str~
+getFullName() str
-cleanLanguageArtifacts(str type) str
-removeNonObjectTypes(List~str~ typeList) List~str~
+isParent(AbstractClass klass) bool
+print() None
}
link AbstractClass "class££pycodeanalyzer::core::abstraction::objects::AbstractClass"
class CppParseError
<<External>> CppParseError
class Encoding {
<<Class>>
+ Any magic
+Constructor() None
+getFileEncoding(str file) str
}
link Encoding "class££pycodeanalyzer::core::encoding::encodings::Encoding"
CppAnalyzer --|> Analyzer
CppAnalyzer ..> Configuration
CppAnalyzer ..> AbstractObject
CppAnalyzer ..> AbstractClass
CppAnalyzer ..> CppParseError
CppAnalyzer ..> Encoding
