@startuml
class JavaAnalyzer <<Class>>
{
+ List<str> globalImports
+None Constructor()
+List<AbstractObject> analyze(str rootDir, str path)
+None handleClass(List<AbstractObject> abstractObjects, str path, str currentNS, Union<javalang::ClassDeclaration,javalang::InterfaceDeclaration> klass)
+None handleEnum(List<AbstractObject> abstractObjects, str path, str currentNS, javalang::EnumDeclaration enum)
+None handleParent(Any item, AbstractClass klass)
+str deduceVisibility(Any item)
+str deduceType(Any item)
}
class Analyzer <<Class>>
{
+ Any logger
+None Constructor(str name)
+List<AbstractObject> analyze(str rootDir, str path)
}
class AbstractObject <<Class>>
{
+ str name
+ str type
+ str origin
+ AbstractObjectLanguage language
+ List<str> usingNS
+ List<str> linkedGenericTypes
+None Constructor(str name, str origin)
+None addUsingNamespace(str namespace)
}
class ClassDeclaration <<External>>
class InterfaceDeclaration <<External>>
class Union <<External>>
class EnumDeclaration <<External>>
class AbstractClass <<Class>>
{
+ str namespace
+ str type
+ List<Tuple<str,str,str>> members
+ List<Tuple<str,str,List<Tuple<str,str>>,str>> methodes
+ List<Tuple<str,str,str>> parents
+ List<str> linkedGenericTypes
+None Constructor(str name, str namespace, str origin)
+None addGenericType(str genType)
+None addMember(str type, str name, str visibility)
+bool hasMember(str name)
+None addMethod(str returnType, str name, List<Tuple<str,str>> parameters, str visibility)
+None addParent(str completetype, str name, str visibility)
+List<str> getLinkedTypes()
-bool isPotentialClassName(str type)
-List<str> getDependanceFromType(str type)
-List<str> splitTypes(Any decl)
+str getFullName()
-str cleanLanguageArtifacts(str type)
-List<str> removeNonObjectTypes(List<str> typeList)
+bool isParent(AbstractClass klass)
+None print()
}
JavaAnalyzer --|> Analyzer
JavaAnalyzer ..|> AbstractObject
JavaAnalyzer ..|> ClassDeclaration
JavaAnalyzer ..|> InterfaceDeclaration
JavaAnalyzer ..|> Union
JavaAnalyzer ..|> EnumDeclaration
JavaAnalyzer ..|> AbstractClass
@enduml
